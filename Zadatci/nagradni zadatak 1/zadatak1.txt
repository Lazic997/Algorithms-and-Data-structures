Napisati program kojai sažima listu tako što izbacuje svaki element koji se više puta pojavljuje u listi. 

NAPOMENA: Zadatak se mora riješiti korištenjem listi, u suprotnom se neće priznati.
ULAZ: cijeli brojevi podaci liste sve dok se ne učita -1. Taj zadnji -1 ne treba dodavati u listu.

IZLAZ: u listi ostaju samo jedinstvene vrijednosti. Sve kopije se trebaju izbrisati. 
Elemente liste ispisati redom, razdvojene jednim razmakom. Ako je lista prazna onda ne ispisivati ništa.

PRIMJER ULAZA: 

1 3 8 3 1 2 3 6 -1

PRIMJER IZLAZA:

1 3 8 2 6

NAPOMENA:
Vaše riješenje treba pohraniti s ekstenzijom programskog jezika u kojem ste riješili: .c, .cpp, .java, ... 
kako bi se moglo automatski testirati i ocijeniti. Prva ispravna riješenja bit će nagrađena nagradnim bodom.

//Ovo rjesenje je specificno za test
#include <stdio.h>
#include <stdlib.h>

typedef struct lista{
    int vrijednost;
    struct lista *next;
}LISTA;

void dodajElementNaKraj(LISTA**, int);
void ispisiListu(LISTA*);
void obrisiDuplikate(LISTA*);
LISTA* oslobodiMemoriju(LISTA*);

int main(){

    LISTA *glavaListe = NULL;
    int n;

    do{

        scanf("%d", &n);
        if(n==-1){
            break;
        }
        dodajElementNaKraj(&glavaListe,n);
            

    }while(n!=-1);

    obrisiDuplikate(glavaListe);
    ispisiListu(glavaListe);

    glavaListe = oslobodiMemoriju(glavaListe);

    return 0;

}

void dodajElementNaKraj(LISTA** glavaListe, int number){

    LISTA* noviCvor = malloc(sizeof(LISTA));
    noviCvor->vrijednost = number;
    noviCvor->next = NULL;

    if(*glavaListe == NULL)
        *glavaListe = noviCvor;
    else{
        LISTA* zadnjiCvor = *glavaListe;

        while(zadnjiCvor->next != NULL){
            zadnjiCvor = zadnjiCvor->next;
        }

        zadnjiCvor->next = noviCvor;
    }
}

void ispisiListu(LISTA* glavaListe){
    LISTA* temp = glavaListe;

    while(temp != NULL){
        printf("%d ", temp->vrijednost);
        temp = temp->next;
    }
}

LISTA* oslobodiMemoriju(LISTA* prolazniCvor){

    LISTA* obrisiCvor = NULL;

    while(prolazniCvor){
        obrisiCvor = prolazniCvor;
        prolazniCvor = prolazniCvor->next;
        free(obrisiCvor);
    }
    return NULL;
}

void obrisiDuplikate(LISTA* glavaListe){

    LISTA* pv1, *pv2, *duplikat;
    pv1 = glavaListe;

    while(pv1 != NULL && pv1->next != NULL){
        pv2 = pv1;

        while(pv2->next != NULL){
            if(pv1->vrijednost == pv2->next->vrijednost){
                duplikat = pv2->next;
                pv2->next = pv2->next->next;
                free(duplikat);
            }
            else
                pv2 = pv2->next;
        }
        pv1 = pv1->next;

    }
}